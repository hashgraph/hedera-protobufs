syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hedera.services.stream.v7.proto";
// <<<pbj.java_package = "com.hedera.hapi.streams.v7">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "state/blockrecords/running_hashes.proto";

/**
 * Compute the SHA384 hash of RunningHashes, then take that and the sibling
 * hashes and SHA384 hash them to get the hash at the next level up. Repeat till
 * you have root hash and BlockSignature's will be signatures from each node of
 * that root hash.
 */
message BlockStateProof {

  /**
   * The round this proof was created for. We provide this because a proof for a future round can be used
   * to prove the state of the ledger at that round and the rounds before it.
   */
  uint64 round = 1;

  /**
   * Sibling hashes at each level of tree from root to leaf
   */
  repeated SiblingHashes sibling_hashes = 2;

  /**
   * The RunningHashes leaf, Running SHA384 hash of all items contained in the
   * block. And previous 3 blocks running hashes.
   *
   * RunningHashes.running_hash = the end running hash of this block
   * RunningHashes.n_minus_1_running_hash = the start running hash of this
   * block, aka the end running hash of previous block.
   */
  RunningHashes end_running_hashes = 3;

  /**
   * Nodes signing the root hash of state proof tree. This will include at least
   * 2/3rds + 1 nodes of the current valid address book. It might be a different
   * subset of nodes in block files produced by different nodes.
   */
  repeated BlockSignature block_signatures = 4;
}

/**
 * Signature of one node on root hash of state proof
 */
message BlockSignature {
  /**
   * The RSA signature of root SHA384 hash of merkle tree path to the
   * RunningHashes leaf.
   */
  bytes signature = 1;

  /**
   * The node that is singing. This is needed to look up the node public key
   * in latest address book to verify the signature above.
   */
  uint64 node_id = 2;
}

/**
 * All sibling hashes at one level in the tree
 */
message SiblingHashes {
  repeated bytes sibling_hash = 1;
}
