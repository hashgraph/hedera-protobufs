syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hedera.services.stream.v7.proto";
// <<<pbj.java_package = "com.hedera.hapi.streams.v7">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";
import "custom_fees.proto";
import "exchange_rate.proto";
import "response_code.proto";
import "timestamp.proto";

message TransactionResult {
  /**
   * The response code that indicates the current status of the transaction.
   */
  ResponseCodeEnum status = 1;

  /**
   * The consensus timestamp of the transaction.
   */
  Timestamp consensus_timestamp = 2;

  /**
   * In the record of an internal transaction, the consensus timestamp of the
   * user transaction that spawned it.
   */
  Timestamp parent_consensus_timestamp = 3;

  /**
   * The exchange rates in effect when the transaction reached consensus.
   */
  ExchangeRateSet exchange_rate = 4;

  /**
   * While we now have the state changes as part of the block stream,
   * we may not have the full "why" this change happened. To surface information
   * such as staking rewards, fees, etc. we need to include some of the
   * artifacts from the original TransactionRecord.
   */

  /**
   * The actual transaction fee charged, not the original transactionFee value
   * from TransactionBody.
   */
  uint64 transaction_fee_charged = 5;

  /**
   * All hbar transfers as a result of this transaction, such as fees, or
   * transfers performed by the transaction, or by a smart contract it calls, or
   * by the creation of threshold records that it triggers.
   */
  TransferList transfer_list = 6;

  /**
   * All Token transfers as a result of this transaction.
   */
  repeated TokenTransferList token_transfer_lists = 7;

  /**
   * All token associations implicitly created while handling this transaction.
   */
  repeated TokenAssociation automatic_token_associations = 8;

  /**
   * List of accounts with the corresponding staking rewards paid as a result of
   * a transaction.
   */
  repeated AccountAmount paid_staking_rewards = 9;

  /**
   * Congestion pricing multiplier at the time the transaction was executed.
   */
  uint64 congestion_pricing_multiplier = 10;
}
