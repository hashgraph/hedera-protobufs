syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hedera.services.stream.v7.proto";
// <<<pbj.java_package = "com.hedera.hapi.streams.v7">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";
import "exchange_rate.proto";
import "state/blockrecords/block_info.proto";
import "state/blockrecords/running_hashes.proto";
import "state/common.proto";
import "state/congestion/congestion_level_starts.proto";
import "state/consensus/topic.proto";
import "state/contract/bytecode.proto";
import "state/contract/storage_slot.proto";
import "state/file/file.proto";
import "state/primitives.proto";
import "state/recordcache/recordcache.proto";
import "state/schedule/schedule.proto";
import "state/throttles/throttle_usage_snapshots.proto";
import "state/token/account.proto";
import "state/token/network_staking_rewards.proto";
import "state/token/nft.proto";
import "state/token/staking_node_info.proto";
import "state/token/token.proto";
import "state/token/token_relation.proto";
import "timestamp.proto";

enum StateChangesCause {
  /**
   * Transaction state changes.
   */
  STATE_CHANGE_CAUSE_TRANSACTION = 0;

  /**
   * System state change.
   */
  STATE_CHANGE_CAUSE_SYSTEM = 1;

  /**
    * End of a block state changes.
   */
  STATE_CHANGE_CAUSE_END_OF_BLOCK = 2;

  /**
   * Migration state changes.
   */
  STATE_CHANGE_CAUSE_MIGRATION = 3;
}

message StateChanges {
  /**
   * The cause of the state changes.
   */
  StateChangesCause cause = 1;

  /**
   * The consensus timestamp of the transaction.
   */
  Timestamp consensus_timestamp = 2;

  /**
   * Each type of transaction has specific state changes.
   */
  repeated StateChange state_changes = 3;
}

message StateChange {
  /**
   * path to change
   */
  uint64 merkle_tree_path = 1;

  // TODO: We will need a way to initialize new named states.
  // nft, account, etc.. ...maybe we should an enum for which
  // one of the Named States, i.e. what's the table name?
  string state_name = 2;

  oneof change_operation {
    SingletonUpdateChange singleton_update = 3;
    SingletonDeleteChange singleton_delete = 4;
    MapUpdateChange map_update = 5;
    MapDeleteChange map_delete = 6;
    QueuePushChange queue_push = 7;
    QueuePopChange queue_pop = 8;
  }
}

message SingletonUpdateChange {
  oneof new_value {
    BlockInfo block_info_value = 1;
    CongestionLevelStarts congestion_level_starts_value = 2;
    EntityNumber entity_number_value = 3;
    ExchangeRateSet exchange_rate_set_value = 4;
    NetworkStakingRewards network_staking_rewards_value = 5;
    ProtoBytes proto_bytes_value = 6;
    ProtoString proto_string_value = 7;
    RunningHashes running_hashes_value = 8;
    ThrottleUsageSnapshots throttle_usage_snapshots_value = 9;
    Timestamp timestamp_value = 10;
  }
}

message SingletonDeleteChange {
  // We might want to serialize the deleted element here in the future.
}

message MapUpdateChange {
  // A combination of StateDefinitions from inMemory and onDisk.
  oneof key {
    AccountID account_id_key = 1;
    EntityIDPair entity_id_pair_key = 2;
    EntityNumber entity_number_key = 3;
    FileID filed_id_key  = 4;
    NftID nft_id_key = 5;
    ProtoBytes proto_bytes_key = 6;
    ProtoLong proto_long_key = 7;
    ProtoString proto_string_key = 8;
    ScheduleID schedule_id_key = 9;
    SlotKey slot_key_key = 10;
    TokenID token_id_key = 11;
    TopicID topic_id_key = 12;
  }

  oneof new_value {
    Account account_value = 24;
    AccountID account_id_value = 25;
    Bytecode bytecode_value = 26;
    File file_value = 27;
    Nft nft_value = 28;
    ProtoString proto_string_value = 29;
    Schedule schedule_value = 30;
    ScheduleList schedule_list_value = 31;
    SlotValue slot_value_value = 32;
    StakingNodeInfo staking_node_info_value = 33;
    Token token_value = 34;
    TokenRelation token_relation_value = 35;
    Topic topic_value = 36;
  }
}

message MapDeleteChange {
  // A combination of StateDefinitions from inMemory and onDisk.
  oneof key {
    AccountID account_id_key = 1;
    EntityIDPair entity_id_pair_key = 2;
    EntityNumber entity_number_key = 3;
    FileID filed_id_key  = 4;
    NftID nft_id_key = 5;
    ProtoBytes proto_bytes_key = 6;
    ProtoLong proto_long_key = 7;
    ProtoString proto_string_key = 8;
    ScheduleID schedule_id_key = 9;
    SlotKey slot_key_key = 10;
    TokenID token_id_key = 11;
    TopicID topic_id_key = 12;
  }
}

// QueuePushChange represents a change to a queue in which an element is added to the end of the queue after its current
// last element.
message QueuePushChange {
  oneof new_element {
    ProtoBytes proto_bytes_element = 1;
    ProtoString proto_string_element = 2;
    TransactionRecordEntry transaction_record_entry_element = 3;
  }
}

// QueuePopChange represents a change to a queue in which an element is removed to the head of the queue, i.e. the
// oldest element.
message QueuePopChange {
  // We might want to serialize the popped element here in the future.
}
