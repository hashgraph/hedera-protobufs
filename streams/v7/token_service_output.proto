syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hedera.services.stream.v7.proto";
// <<<pbj.java_package = "com.hedera.hapi.streams.v7">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";

message TokenCreateOutput {
  /**
   * The id of the newly created token.
   */
  TokenID token_id = 1;
}

//message TokenFreezeAccountOutput {}

//message TokenUnfreezeAccountOutput {}

//message TokenGrantKycOutput {}

//message TokenRevokeKycOutput {}

//message TokenDeleteOutput {}

//message TokenUpdateOutput {}

message TokenMintOutput {
  oneof token_type {
    TokenMintFungibleCommonOutput token_mint_fungible_common_output = 1;
    TokenMintNonFungibleUniqueOutput token_mint_non_fungible_unique_output = 2;
  }
}

message TokenMintFungibleCommonOutput {
  /**
   * The current total supply of this token.
   */
  uint64 new_total_supply = 1;
}

message TokenMintNonFungibleUniqueOutput {
  /**
   * The total number of NFTs issued for a given token_id.
   */
  uint64 new_total_supply = 1;

  /**
   * The serial numbers of the newly created NFTs.
   */
  repeated uint64 serial_numbers = 2;
}

message TokenBurnOutput {
  oneof output {
    TokenBurnFungibleCommonOutput token_burn_fungible_common_output = 1;
    TokenBurnNonFungibleUniqueOutput token_burn_non_fungible_unique_output = 2;
  }
}

message TokenBurnFungibleCommonOutput {
  /**
   * The current total supply of this token.
   */
  uint64 new_total_supply = 1;
}

message TokenBurnNonFungibleUniqueOutput {
  /**
   * The total number of NFTs issued for a given token_id.
   */
  uint64 new_total_supply = 1;
}

message TokenWipeAccountOutput {
  oneof output {
    TokenWipeAccountFungibleCommonOutput token_wipe_fungible_common_output = 1;
    TokenWipeAccountNonFungibleUniqueOutput token_wipe_non_fungible_unique_output = 2;
  }
}

message TokenWipeAccountFungibleCommonOutput {
  /**
   * The current total supply of this token.
   */
  uint64 new_total_supply = 1;
}

message TokenWipeAccountNonFungibleUniqueOutput {
  /**
   * The total number of NFTs issued for a given token_id.
   */
  uint64 new_total_supply = 1;
}

//message TokenAssociateOutput {}

//message TokenDissociateOutput {}

//message TokenFeeScheduleUpdateOutput {}

//message TokenPauseOutput {}

//message TokenUnpauseOutput {}
