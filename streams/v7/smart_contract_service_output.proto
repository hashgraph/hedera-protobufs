syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hedera.services.stream.v7.proto";
// <<<pbj.java_package = "com.hedera.hapi.streams.v7">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "contract_action.proto";
import "contract_bytecode.proto";
import "contract_call_local.proto";
import "contract_state_change.proto";
import "sidecar_file.proto";

/**
 * ContractCallTransaction output.
 */
message ContractCallOutput {
  repeated TransactionSidecarRecord sidecars = 1;

  /**
   * Record of the value returned by the smart contract function (if it
   * completed and didn't fail) from ContractCallTransaction. This is the
   * overall result of the evm execution.
   */
  ContractFunctionResult contract_call_result = 2;
}

/**
 * ContractCreateTransaction output.
 */
message ContractCreateOutput {
  repeated TransactionSidecarRecord sidecars = 1;

  /**
   * Record of the value returned by the smart contract constructor (if it
   * completed and didn't fail) from ContractCreateTransaction.
   */
  ContractFunctionResult contract_create_result = 2;

  /**
   * Set on an internal ContractCreate transaction, triggered by a user
   * transaction with a (previously unused) alias, the new account's alias.
   */
  bytes alias = 3;
}

// no evm exec, only modified entity
// TODO: remove
//message ContractUpdateOutput {}

// no evm exec, only modified entity
// TODO: remove
//message ContractDeleteOutput {}

/**
 * An Ethereum encoded transaction output.
 */
message EthereumOutput {
  repeated TransactionSidecarRecord sidecars = 1;

  /**
   * The keccak256 hash of the ethereumData. This field will only be populated
   * for EthereumTransaction.
   */
  bytes ethereum_hash = 2;
}
