syntax = "proto3";

package com.hedera.hapi.node.addressbook;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.addressbook">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";
import "query_header.proto";
import "response_header.proto";

/**
 * A transaction body for a `getNodeInfo ` node information query request.
 *
 * This transaction body SHALL be considered a "privileged transaction".
 *
 * - A `NodeGetInfoQuery` MUST be signed by the governing council.
 * - This query requests details for a single consensus node entry in the
 *   network state.
 * - The node identifier `node_id` is REQUIRED, and identifies the node for
 *   which details are requested.
 *
 * > Note
 * >> Requiring governing council signature for a query like this seems quite
 * >> unusual.  Further detail for _why_ only the governing council is permitted
 * >> to query this information would be helpful (particularly as the block
 * >> stream and mirror node make it trivial to obtain the same information).
 */
message NodeGetInfoQuery {
    /**
     * Standard information sent with every query operation.
     * <p>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     */
    proto.QueryHeader header = 1;

    /**
     * A consensus node identifier for which information is requested.
     * <p>
     * If the identified node is not valid, this request SHALL fail with
     * a response code `INVALID_NODE_ID`.<br/>
     * If the identified node is not present in the network state,
     * this request SHALL fail with a response code `INVALID_NODE_ID`.
     */
    uint64 node_id = 2;
}

/**
 * A query response describing the current state of a consensus node entry in
 * the network state.
 */
message NodeInfo {
    /**
     * A consensus node identifier in the network state.
     * <p>
     * This value identifies this node within the network address book.<br/>
     * This value is REQUIRED.
     */
    uint64 node_id = 1;

    /**
     * An account identifier.
     * <p>
     * This account MUST be owned by the entity responsible for the node.<br/>
     * This account SHALL be charged transaction fees for any transactions that
     * are submitted to the network by this node and fail due diligence checks.<br/>
     * This value is REQUIRED.
     */
    proto.AccountID account_id = 2;

    /**
     * A short description of the consensus node.
     * <p>
     * This value, if present, MUST NOT exceed 100 bytes when encoded as UTF-8.
     */
    string description = 3;

    /**
     * A list of service endpoints for gossip.
     * <p>
     * These endpoints SHALL represent the published endpoints to which other
     * consensus nodes may _gossip_ transactions.<br/>
     * These endpoints SHOULD NOT specify both address and DNS name.<br/>
     * This list SHALL NOT be empty.<br/>
     * This list SHALL NOT contain more than `10` entries.<br/>
     * The first two entries in this list SHALL be the endpoints published to
     * all consensus nodes.<br/>
     * All other entries SHALL be reserved for future use.
     * <p>
     * Each network may have additional requirements for these endpoints.
     * A client MUST check network-specific documentation for those
     * details.<br/>
     * <blockquote>Example<blockquote>
     * Hedera Mainnet _requires_ that address be specified, and does not
     * permit DNS name (FQDN) to be specified.<br/>
     * Mainnet also requires that the first entry be an "internal" IP
     * address and the second entry be an "external" IP address.
     * </blockquote>
     * <blockquote>
     * Solo, however, _requires_ DNS name (FQDN) but also permits
     * address.
     * </blockquote></blockquote>
     */
    repeated proto.ServiceEndpoint gossip_endpoint = 4;

    /**
     * A list of service endpoints for gRPC calls.
     * <p>
     * These endpoints SHALL represent the published endpoints to which clients
     * may submit transactions.<br/>
     * These endpoints SHOULD specify address and port.<br/>
     * These endpoints MAY specify a DNS name.<br/>
     * These endpoints SHOULD NOT specify both address and DNS name.<br/>
     * This list SHALL NOT be empty.<br/>
     * This list SHALL NOT contain more than `8` entries.
     * <p>
     * Each network may have additional requirements for these endpoints.
     * A client MUST check network-specific documentation for those
     * details.
     */
    repeated proto.ServiceEndpoint service_endpoint = 5;

    /**
     * A certificate used to sign gossip events.
     * <p>
     * This value SHALL be a certificate of a type permitted for gossip
     * signatures.<br/>
     * This value SHALL be the DER encoding of the certificate presented.<br/>
     * This field is REQUIRED and MUST NOT be empty.
     */
    bytes gossip_ca_certificate = 6;

    /**
     * A hash of the node gRPC TLS certificate.
     * <p>
     * This value MAY be used to verify the certificate presented by the node
     * during TLS negotiation for gRPC.<br/>
     * This value MUST be a SHA-384 hash.<br/>
     * The TLS certificate to be hashed SHALL first be in PEM format and SHALL
     * be encoded with UTF-8 NFKD encoding to a stream of bytes provided to
     * the hash algorithm.<br/>
     * This field is OPTIONAL.
     */
    bytes grpc_certificate_hash = 7;

    /**
     * A consensus weight.
     * <p>
     * Each node SHALL have a weight in consensus calculations.<br/>
     * The consensus weight of a node SHALL be calculated based on the amount
     * of HBAR staked to that node.<br/>
     * Consensus SHALL be calculated based on agreement of greater than `2/3`
     * of the total `weight` value of all nodes on the network.
     */
    uint64 weight = 8;

    /**
     * A flag indicating this node was removed from the network.
     * <p>
     * This flag SHALL NOT be set unless a `deleteNode` transaction previously
     * succeeded identifying that node.<br/>
     * If this flag is set, the associated node SHALL NOT participate in the
     * network.
     */
    bool deleted = 10;

    /**
     * A ledger ID.
     * <p>
     * This identifies the network that responded to this query.
     * The specific values are documented in [HIP-198]
     * (https://hips.hedera.com/hip/hip-198).
     */
    bytes ledger_id = 9;
}

/**
 * Response body for a `getNodeInfo` node information query.
 */
message NodeGetInfoResponse {
    /**
     * The standard response information for queries.
     * <p>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     */
    proto.ResponseHeader header = 1;

    /**
     * The requested detail information.
     * <p>
     * This message SHALL contain the full detail for the node identified in the
     * query request.
     */
    NodeInfo nodeInfo = 2;
}
