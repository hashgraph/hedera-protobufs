syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import "BasicTypes.proto";
import "google/protobuf/wrappers.proto";

/* A fraction of the units to be collected from the payer of a CryptoTransfer 
that transfers units of a token. The amount charged will never be
less than the stated minimumUnitsToCollect, and never greater than 
the stated maximumUnitsToCollect (if given). */
message FractionalFee {
  Fraction fractionOfUnitsToCollect = 1; // percentage of the Tokens involved in the transfer to be charged as fee
  uint64 minimumUnitsToCollect = 2; // minimum token units to be charged as fee
  google.protobuf.UInt64Value maximumUnitsToCollect = 3; // maximum token units to be charged as fee
}

/* A fixed custom fee to be collected during a CryptoTransfer that transfers units of a token */
message FixedFee {
  uint64 unitsToCollect = 1; // units of either hbar/token to be collected
  /* If set, the denomination of the units to collect */
  TokenID tokenId = 2; // denominating token type. If this is empty the denomination type is hbar.
}

/* Custom transfer fee in token units or hbar that must be paid to the specified feeCollector during a
CryptoTransfer that transfers units of a token with a custom fee schedule. */
message CustomFee {
  oneof fee {
    FixedFee fixedFee = 1; // Fixed fee to be charged
    FractionalFee fractionalFee = 2; // Fractional fee to be charged
  }
  AccountID feeCollector = 3; // Fee collector of this custom fee.
}

/* A custom transfer fee in token units or hbar that was computed, based
on a CustomFee type, to be charged for a CryptoTransfer. */
message CustomFeeCharged {
  uint64 unitsCharged = 1; // units of either hbar/token that were charged for this CryptoTransfer 
  TokenID tokenId = 2; // denominating token type. If this is empty the denomination type is hbar.
  AccountID feeCollector = 3; // Fee collector of this custom fee.
}

/* Custom fees that are charged for a CryptoTransfer. */
message CustomFeesCharged {
  repeated CustomFeeCharged customFeesCharged = 1; // all custom fees charged 
}

/* Custom fees associated to a token */
message CustomFees {
  repeated CustomFee customFees = 1; // all custom fees for a token 
}
