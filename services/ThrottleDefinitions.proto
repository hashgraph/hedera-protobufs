syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "BasicTypes.proto";

/* For details behind this throttling design, please see the <i>docs/throttle-design.md</i>
document in the <a href="https://github.com/hashgraph/hedera-services">Hedera Services</a> repository. */

/* A set of operations which should be collectively throttled at a given ops-per-second limit. */
message ThrottleGroup {
  repeated HederaFunctionality operations = 1; // The operations to be throttled
  uint32 opsPerSec = 2; // The rate to be allowed
}

/* A list of throttle groups that should compete for the same internal capacity bucket. */
message ThrottleBucket {
  string name = 1; // A name for this capacity bucket (primarily for use in logs)
  uint32 burstPeriod = 2; // The number of seconds required for this bucket to drain completely when full
  repeated ThrottleGroup throttleGroups = 3; // The throttle groups competing for this bucket's capacity
}

/* A list of throttle buckets which, simultaneously enforced, define the system's throttling policy. 
<ol>
  <li> When an operation appears in more than one throttling bucket, all its buckets must have capacity
or it will be throtted.</li> 
  <li>An operation assigned to no buckets is always throttled.</li>
</ol> 
*/
message ThrottleDefinitions {
  repeated ThrottleBucket throttleBuckets = 1;
}
