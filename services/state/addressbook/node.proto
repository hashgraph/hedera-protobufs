syntax = "proto3";

package com.hedera.hapi.node.state.addressbook;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "basic_types.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.addressbook">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * A single address book node in the network state.
 *
 * Each node in the network address book SHALL represent a single actual
 * consensus node that is eligible to participate in network consensus.
 *
 * Address book nodes SHALL NOT be _globally_ uniquely identified. A given node
 * is only valid within a single realm and shard combination, so the identifier
 * for a network node SHALL only be unique within a single realm and shard
 * combination.
 */
message Node {
    /**
     * A consensus node identifier.<br/>
     * Node identifiers SHALL be unique _within_ a shard and realm,
     * but a node SHALL NOT, ever, serve multiple shards or realms,
     * therefore the node identifier MAY be repeated _between_ shards and realms.
     */
    uint64 node_id = 1;

    /**
     * An account identifier.<br/>
     * This account MUST be owned by the entity responsible for the node.<br/>
     * This account SHALL be charged transaction fees for any transactions that
     * are submitted to the network by this node and fail due diligence checks.
     */
    proto.AccountID account_id = 2;

    /**
     * A short description of the node.<br/>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.
     */
    string description = 3;

    /**
     * A list of service endpoints.<br/>
     * These endpoints SHALL specify address and port.<br/>
     * These endpoints SHALL NOT specify a DNS name.<br/>
     * This list SHALL NOT be empty.<br/>
     * This list SHALL NOT contain more than `10` entries.<br/>
     * The first entry in this list SHALL be the endpoint published to all
     * consensus nodes.<br/>
     * All other entries SHALL be reserved for future use.
     */
    repeated proto.ServiceEndpoint gossip_endpoint = 4;

    /**
     * A list of service endpoints.<br/>
     * These endpoints SHALL represent the published endpoints to which clients
     * may submit transactions.<br/>
     * These endpoints SHALL specify address and port.<br/>
     * These endpoints SHALL NOT specify DNS name.<br/>
     * This list SHALL NOT be empty.<br/>
     * This list SHALL NOT contain more than `8` entries.
     */
    repeated proto.ServiceEndpoint service_endpoint = 5;

    /**
     * A certificate used to sign gossip events.<br/>
     * This value SHALL be a certificate of a type permitted for gossip
     * signatures.<br/>
     * The value presented SHALL be a UTF-8 NFKD encoding of the TLS
     * certificate.<br/>
     * The certificate encoded SHALL be in PEM format.<br/>
     * This field is REQUIRED and MUST NOT be empty.
     */
    bytes gossip_ca_certificate = 6;

    /**
     * A hash of the node gRPC certificate.<br/>
     * This value MAY be used to verify the certificate presented by the node
     * during TLS negotiation for gRPC.<br/>
     * This value MUST be a SHA-384 hash.<br/>
     * The value to be hashed MUST be a UTF-8 NFKD encoding of the TLS
     * certificate.<br/>
     * The certificate to be encoded MUST be in PEM format.<br/>
     * This field is OPTIONAL.
     */
    bytes grpc_certificate_hash = 7;

    /**
     * A consensus weight.<br/>
     * Each node SHALL have a weight in consensus calculations.<br/>
     * The consensus weight of a node SHALL be calculated based on the amount
     * of HBAR staked to that node.<br/>
     * Consensus SHALL be calculated based on agreement of greater than `2/3`
     * of the total `weight` value of all nodes on the network.
     */
    uint64 weight = 8;

    reserved "status";
    reserved 9;
    /* [Placed AFTER reserved, and not doc-comment due to PBJ issue #217]
     * Reserved as `NodeStatus status = 9;`
     * A node status value.<br/>
     * This value is not yet used and design is incomplete.
     */

}

/**
 * An enumeration of the states possible for a consensus node.
 *
 * Status changes are not always immediate.  Some status changes are completed
 * in two steps, first the consensus node entry is marked for a pending
 * change. Following the next `freeze` transaction with the field
 * `freeze_type` set to `PREPARE_UPGRADE` (herein called a `network upgrade`)
 * the node status change completes and the pending state is resolved.
 *
 * - A node is initially created in a `PENDING_ADDITION` state.
 * - Following the next `network upgrade` every node with the status
 *   `PENDING_ADDITION` SHALL be added to the live address book, the status
 *   SHALL change to `IN_CONSENSUS` and these new nodes SHALL begin to operate
 *   as full consensus nodes.
 * - If a `deleteNode` transaction is processed for a consensus node, the node
 *   status SHALL change to the `PENDING_DELETION` state.
 * - Following the next `network upgrade` every node with the status
 *   `PENDING_DELETE` SHALL be removed from the live address book, the status
 *   SHALL change to `DELETED`, and the node SHALL no longer participate in
 *   network consensus.
 * - The `DELETED` state SHALL be a terminal state. Node identifiers SHALL NOT
 *   be re-used and SHALL NOT be "revived".
 */
enum NodeStatus {
    /**
     * A consensus node in this state is deleted and permanently removed
     * from the network.
     */
    DELETED = 0;

    /**
     * A consensus node in this state is newly created but not yet active on
     * the network.<br/>
     * The node SHALL become active following the next `freeze` transaction
     * with the field `freeze_type` set to `PREPARE_UPGRADE`.
     */
    PENDING_ADDITION = 1;

    /**
     * A consensus node in this state is subject to a request to delete
     * that node.<br/>
     * The node SHALL be removed from the network following the next
     * `freeze` transaction with the field `freeze_type` set to
     * `PREPARE_UPGRADE`.
     */
    PENDING_DELETION = 2;

    /**
     * A consensus node in this state is active on the network and
     * participating in network consensus.
     */
    IN_CONSENSUS = 3;
}
