syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import "basic_types.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.token">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * Representation of a Node in the network Merkle tree
 *
 * As with all network entities, a Node has a unique nodeId, which is usually given along
 */

message Node{
    /**
     * The unique entity id of the DynamicAddress.
     */
    int64 node_id = 1;

    /**
     * node account id
     */
    AccountID account_id = 2;

    /**
    * nickName of the node
    */
    string nickName = 3;

    /**
     * description of the node
     */
    string description = 4;

    /**
    * inbound ip address or FQDN and port
    */
    ServiceEndpoint inbound_gossip_endpoint = 5;

    /**
     * outbound ip address or FQDN and port
     */
    ServiceEndpoint outbound_gossip_endpoint = 6;

    /**
    * # A node's service IP addresses and ports
    */
    repeated ServiceEndpoint service_endpoint = 7;

    /**
    * node public key
    */
    string public_key = 8;

    /**
      * node weight.
      */
    int64 weight = 9;

    /**
     * node x509 certificate
     */
    bytes certificate = 10;

    /**
     * an enum to indicate the status of the node
     */
    NodeStatus status = 11;
}

enum NodeStatus {
    /**
     * node deleted
     */
    DELETED = 0;

    /**
     * pending to be added
     */
    PENDING_ADDITION = 1;

    /**
     * pending to be deleted
     */
    PENDING_DELETION = 2;

    /**
     * join in the consensus
     */
    IN_CONSENSUS = 3;
}