/**
 * # File
 * A "file" in the distributed ledger is a stream of bytes. These bytes may
 * contain any data, and are limited in length based on network configuration
 * (for example, 1048576).
 *
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119)
 * and clarified in [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package proto;

/*
 * Copyright (C) 2023-2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "basic_types.proto";

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.state.file">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * Representation of an Hedera File Service `file`.
 *
 * Files offer a place to store additional data, much more than is available in
 * other entities, for use with smart contracts, non-fungible tokens, etc...
 * As with all network entities, a file has a unique entity number, which is
 * given along with the network's shard and realm in the form of a
 * shard.realm.number id.
 *
 * > Review Question
 * >> File lacks auto renewal (account and period).  We need to add that here,
 * >> and also to create and update transactions.
 * >
 * >> The keys field is weird and really needs to change to adminKey and
 * >> deleteKey to be more correct and match other things.
 */
message File {
    /**
     * This file's ID within the global network state.
     * <p>
     * This value SHALL be unique within the network.
     */
    FileID file_id = 1;

    /**
     * The file's expiration time in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch with 0 at `1970-01-01T00:00:00.000Z`.
     */
    int64 expiration_second = 2;

    /**
     * A list of keys that MUST sign any transaction to update this file.
     * <p>
     * Only _one_ of these keys must sign a transaction to delete the file.<br/>
     * This field SHOULD NOT be `null` or an empty list.
     */
    KeyList keys = 3;

    /**
     * The contents of the file.
     * <p>
     * This SHALL be limited to the current maximum file size; typically no
     * more than 1 Megabyte (1048576 bytes).
     */
    bytes contents = 4;

    /**
     * A short description of the file.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.
     */
    string memo = 5;

    /**
     * A flag indicating that this file is deleted.
     * <p>
     * The `contents` of a deleted "regular" file SHALL be an empty
     * (zero length) bytes.
     */
    bool deleted = 6;

    /**
     * The pre-system-delete expiration time of a deleted "system" file, in seconds.
     * <p>
     * This field SHALL contain the original expiration time of a "system" file
     * that is deleted. This SHOULD be used to restore that expiration time if
     * the file is subsequently "un-deleted" before it is purged from the
     * system.<br/>
     * A "regular" file cannot be "un-deleted", so this field SHALL NOT be set
     * for those files.
     */
    int64 pre_system_delete_expiration_second = 7;

}
