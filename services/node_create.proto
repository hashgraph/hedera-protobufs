syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2023 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
// <<<pbj.java_package = "com.hedera.hapi.node.consensus">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";

/**
 * See [NodeService.createNode()](#proto.NodeService)
 * Create a new node. After the node is created, the node_id for it is in the receipt.
 * This HAPI APIs to facilitate changes to the address book used across the Hedera network.
 * As a council member, I want the ability to submit signed HAPI transactions to add a new consensus node
 * to the Hedera network within 24 hours, so that I can perform operations independently.
 * When a valid council member initiates a HAPI transaction to add a new node, then the network should
 * acknowledge the transaction and update the network’s Address Book within 24 hours.
 * for phase 2, this just adds the node to the merkle tree and will be used to write config.txt and public.pfx during prepare freeze
 * the added node will not be active until the network is upgraded.
 */
message NodeCreateTransactionBody {
    /**
     * node account id, mandatory field
     */
    AccountID account_id = 1;

    /**
     * description of the node, optional field
     */
    string description = 2;

    /**
     * inbound ip address or FQDN and port, ip/port on the local network, mandatory field
     */
    ServiceEndpoint inbound_gossip_endpoint = 3;

    /**
     * outbound ip address or FQDN and port, ip/port outside the NATing firewall, mandatory field
     */
    ServiceEndpoint outbound_gossip_endpoint = 4;

    /**
     * # A node's service IP addresses and ports, optional field
     */
    repeated ServiceEndpoint service_endpoint = 5;

    /**
     * The node's X509 RSA public key used to sign stream files (e.g., record stream
     * files). Precisely, this field is a string of hexadecimal characters which,
     * translated to binary, are the public key's DER encoding.,
     * The public key of this node, as a hex-encoded string, mandatory field
     */
    string public_key = 6;

    /**
     * Hash of the node's TLS certificate. Precisely, this field is a string of
     * hexadecimal characters which, translated to binary, are the SHA-384 hash of
     * the UTF-8 NFKD encoding of the node's TLS cert in PEM format.
     * Its value can be used to verify the node's certificate it presents
     * during TLS negotiations.node x509 certificate hash, optional field
     */
    bytes certificate_hash = 7;
}
