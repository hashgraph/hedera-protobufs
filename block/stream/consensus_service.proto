/**
 * # Consensus Service
 * Block stream messages that report the results of transactions handled by the `Consensus` service.
 *
 * ### Topic Running Hash Calculation
 * Some messages include a topic running hash. This value has changed over time, with the
 * known versions listed here.
 *
 * <hr style="margin: 0.2em -1em 0.2em -1em; height: 0.5em; border-style: solid none solid none; border-width: 2px;"/>
 *
 * This 48-byte field is the output of a SHA-384 digest with input data determined by the
 * value of the `topic_running_hash_version` field.<br/>
 * All new transactions SHALL use `topic_running_hash_version` `3`.<br/>
 * The bytes of each uint64 or uint32 encoded for the hash input MUST be in Big-Endian format.
 * ---
 * If the `topic_running_hash_version` is '0' or '1', then the input data to the SHA-384 digest are,
 * in order:
 *  1. The previous running hash of the topic (48 bytes)
 *  1. The topic's shard (8 bytes)
 *  1. The topic's realm (8 bytes)
 *  1. The topic's number (8 bytes)
 *  1. The number of seconds since the epoch when the `ConsensusSubmitMessage` reached
 *     consensus (8 bytes)
 *  1. The number of nanoseconds within the second when the `ConsensusSubmitMessage` reached
 *     consensus (4 bytes)
 *  1. The `topic_sequence_number` field (8 bytes)
 *  1. The message bytes from the `ConsensusSubmitMessage` (variable).
 * ---
 * If the `topic_running_hash_version` is '2', then the input data to the SHA-384 digest are, in
 * order:
 *  1. The previous running hash of the topic (48 bytes)
 *  1. The `topic_running_hash_version` field (8 bytes)
 *  1. The topic's shard (8 bytes)
 *  1. The topic's realm (8 bytes)
 *  1. The topic's number (8 bytes)
 *  1. The number of seconds since the epoch when the `ConsensusSubmitMessage` reached
 *     consensus (8 bytes)
 *  1. The number of nanoseconds within the second when the `ConsensusSubmitMessage` reached
 *     consensus (4 bytes)
 *  1. The `topic_sequence_number` field (8 bytes)
 *  1. The output of a SHA-384 digest of the message bytes from the `ConsensusSubmitMessage`
 *     (48 bytes)
 * ---
 * If the `topic_running_hash_version` is '3', then the input data to the SHA-384 digest
 * are, in order:
 *  1. The previous running hash of the topic (48 bytes)
 *  1. The `topic_running_hash_version` field (8 bytes)
 *  1. The payer account's shard (8 bytes)
 *  1. The payer account's realm (8 bytes)
 *  1. The payer account's number (8 bytes)
 *  1. The topic's shard (8 bytes)
 *  1. The topic's realm (8 bytes)
 *  1. The topic's number (8 bytes)
 *  1. The number of seconds since the epoch when the `ConsensusSubmitMessage` reached
 *     consensus (8 bytes)
 *  1. The number of nanoseconds within the second when the `ConsensusSubmitMessage` reached
 *     consensus (4 bytes)
 *  1. The `topic_sequence_number` field (8 bytes)
 *  1. The output of a SHA-384 digest of the message bytes from the `ConsensusSubmitMessage`
 *     (48 bytes)
 *
 * <hr style="margin: 0.2em -1em 0.2em -1em; height: 0.5em; border-style: solid none solid none; border-width: 2px;"/>
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream;

/*
 * Hedera Network Services Protobuf
 *
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.block.stream";
// <<<pbj.java_package = "com.hedera.hapi.block.stream">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * Block Stream data for a `createTopic` transaction.
 *
 * This message SHALL NOT duplicate information already contained in the original transaction.
 */
message CreateTopicOutput {}

/**
 * Block Stream data for a `updateTopic` transaction.
 *
 * This message SHALL NOT duplicate information already contained in the original transaction.
 */
message UpdateTopicOutput {}

/**
 * Block Stream data for a `deleteTopic` transaction.
 *
 * This message SHALL NOT duplicate information already contained in the original transaction.
 */
message DeleteTopicOutput {}

/**
 * Block Stream data for a `submitMessage` transaction.
 *
 * This message SHALL NOT duplicate information already contained in the original transaction.
 */
message SubmitMessageOutput {
    /**
     * The version of inputs to the SHA-384 running hash.<br/>
     * For all current transactions, this value SHALL be `3`.
     */
    uint64 topic_running_hash_version = 3;
}
