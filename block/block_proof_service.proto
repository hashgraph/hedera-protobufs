/**
 * # Block Proof Service
 * The Service API exposed by the Block Nodes for Proofs related endpoints.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block;

/*
 * Copyright (C) 2025 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "stream/block_item.proto";
import "stream/block_proof.proto";

option java_package = "com.hedera.hapi.block.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * A cryptographic proof of a block item within a block.
 * <p>
 * This message contains the block item to be verified, its Merkle tree sibling
 * hashes, and a digital signature that attests to the authenticity of the proof.
 */
message BlockContentProof {
  /**
   * The block item that is proved.
   * <p>
   * This field holds the complete block item data that is subject to verification.
   */
  com.hedera.hapi.block.stream.BlockItem block_item = 1;

  /**
   * A list of sibling hashes forming the Merkle proof.
   * <p>
   * These hashes are used to reconstruct the Merkle root, ensuring the block item
   * is included in the corresponding Merkle tree.
   */
  repeated com.hedera.hapi.block.stream.MerkleSiblingHash sibling_hashes = 2;

  /**
   * The digital signature over the block content proof data.
   * <p>
   * This signature confirms the integrity and origin of the block content proof.
   */
  bytes block_signature = 3;
}

/**
 * A request to obtain the proof for block item within a block.
 * <p>
 * The request identifies the block and the block item using one of several methods.
 */
message BlockContentProofRequest {
  /**
   * The block number for which the proof is requested.
   * <p>
   * This field identifies the specific block that contains the target block item.
   */
  uint64 block_number = 1;

  /**
   * One of several methods to specify the block item.
   * <p>
   * Exactly one of the following fields MUST be set:
   * <br/>- `block_item`: The full block item data.
   * <br/>- `block_item_hash`: The hash of the block item.
   * <br/>- `block_item_index`: The index of the block item within the block.
   */
  oneof block_item {
    /**
     * The full block item to be used for generating the proof.
     */
    com.hedera.hapi.block.stream.BlockItem complete_block_item = 2;

    /**
     * The hash of the block item.
     * <p>
     * Use this field when the block item is identified by its hash. And there
     * is only one block item with the hash withing the block.
     */
    bytes block_item_hash = 3;

    /**
     * The index of the block item within the block.
     * <p>
     * This alternative identifier specifies the position of the block item.
     * In case of multiple block items with the same hash, this field must be used.
     */
    uint32 block_item_index = 4;
  }
}

/**
 * An enumeration of response codes for block content proof requests.
 *
 * These codes indicate the outcome of a request for a block content proof.
 */
enum BlockContentProofResponseCode {
  /**
   * The response code is unspecified.
   */
  BLOCK_CONTENT_PROOF_UNKNOWN = 0;

  /**
   * The block content proof was successfully retrieved.
   */
  BLOCK_CONTENT_PROOF_SUCCESS = 1;

  /**
   * The specified block item was not found.
   */
  BLOCK_CONTENT_PROOF_ITEM_NOT_FOUND = 2;

  /**
   * The block content proof is not available for the specified block.
   */
  BLOCK_CONTENT_PROOF_NOT_AVAILABLE = 3;

  /**
   * Duplicate hash items were found, causing ambiguity.
   * Clients MUST use the block item index to resolve the ambiguity.
   */
  BLOCK_CONTENT_PROOF_DUPLICATE_HASH_ITEM_FOUND = 4;
}

/**
 * A response containing the block content proof.
 * <p>
 * This response includes a status code and, if successful, the corresponding
 * block content proof data.
 */
message BlockContentProofResponse {
  /**
   * The status of the block content proof request.
   * <p>
   * Represented as a value from `BlockContentProofResponseCode` indicating
   * the outcome of the request.
   */
  BlockContentProofResponseCode status = 1;

  /**
   * The block content proof details.
   * <p>
   * If the request is successful, this field contains the block item, its
   * Merkle sibling hashes, and the digital signature.
   */
  BlockContentProof block_content_proof = 2;
}

/**
 * A service to retrieve block content proofs.
 * <p>
 * This service provides an endpoint for clients to request a proof of block
 * content integrity.
 */
service BlockContentProofService {
  /**
   * Retrieves the block content proof for a given request.
   * <p>
   * The client MUST provide a `BlockContentProofRequest`, and the service
   * SHALL return a `BlockContentProofResponse` containing the proof details and
   * status.
   */
  rpc getBlockContentProof(BlockContentProofRequest) returns (BlockContentProofResponse);
}
