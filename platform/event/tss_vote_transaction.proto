/**
 * # Tss Vote Transaction
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).
 */
syntax = "proto3";

package com.hedera.hapi.platform.event;

/*
 * Hedera Network Services Protobuf
 *
 * Copyright (C) 2018 - 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.platform.event.legacy";
// <<<pbj.java_package = "com.hedera.hapi.platform.event">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * A transaction used to vote on the validity of TssMessages for a candidate roster.
 */
message TssVoteTransaction {

  /**
   * A hash of the roster containing the node generating this TssVote.
   */
  bytes source_roster_hash = 1;

  /**
   * A hash of the roster that this TssVote is for.
   */
  bytes target_roster_hash = 2;

  /**
   * An identifier (and public key) computed from the TssMessages for the target roster.
   */
  bytes ledger_id = 3;

  /**
   * A signature produced by the node.
   * This is produced using the node RSA signing key to sign the ledger_id.
   * This signature is used to establish a chain of trust in the ledger id.
   */
  bytes node_signature = 4;

  /**
   * A bit vector where the index position of each bit corresponds to the
   * sequence number of a `TssMessageTransaction`. The least significant bit
   * of byte[0] corresponds to sequence number 0 and the most significant bit
   * of byte[0] corresponds to sequence number 7.  The least significant bit
   * of byte[1] corresponds to sequence number 8 and the most significant bit
   * of byte[1] corresponds to the sequence number 15, and so on. If a bit is
   * set to 1, then the TssMessage for the corresponding TssMessageTransaction
   * sequence number was received as one of the first Threshold number of
   * valid TssMessages in consensus order.  If a bit is set to 0, then the
   * TssMessage was invalid or there was no TssMessageTransaction with a
   * sequence number corresponding to the bit index.
   */
  bytes tss_vote = 5;
}
